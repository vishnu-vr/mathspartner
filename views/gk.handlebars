<h3 id="heading" class="mt-4 text-center"></h3>
<div class="mt-4 ml-4 mr-4">
  <input class="form-control" placeholder="Search" onkeyup="filterFunction()" name="search_inp" id="search_inp" type="text">
</div>
<div id="topic_body" class="row">
</div>

<!-- Button trigger modal -->
<button id='create_new' type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter" hidden>
  Launch demo modal
</button>

<!-- Modal -->
<div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLongTitle">Add New</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body text-center">

        <div class="text-center mb-3" id='loading' hidden>
          <h3>Please Wait</h3>
          <div class="spinner-border" role="status">
              <span class="sr-only">Loading...</span>
          </div>
        </div>

        <button type="button" class="btn btn-primary mt-2 ml-2" onclick="show_hide_modals('modal-add-topic')">New Topic ?</button>
        <button type="button" class="btn btn-primary ml-2 mt-2" onclick="show_hide_modals('modal-add-quiz')">New Quiz ?</button>
        <button type="button" class="btn btn-primary ml-2 mt-2" onclick="show_hide_modals('modal-add-audio')">New Audio ?</button>
        <button type="button" class="btn btn-primary ml-2 mt-2" onclick="show_hide_modals('modal-add-youtube')">New YouTube ?</button>
        <button type="button" hidden class="btn btn-primary ml-2 mt-2" onclick="show_hide_modals('modal-add-online-class')">New Online Class ?</button>

        <div id='modal-add-quiz' class="mt-4 text-left" hidden>

            {{!-- topic name (name of the quiz) --}}
            <div id='quiz_name' class="mt-4">
                <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroup-sizing-sm">Quiz Name</span>
                </div>
                <input id="quiz_name_input" type="text" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm" onkeyup="uppercase('quiz_name_input')">
                </div>
            </div>

            {{!-- duration input box --}}
            <div id='duration' class="mt-4">
                <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroup-sizing-sm">Duration</span>
                </div>
                <input id="duration_input" type="number" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm">
                </div>
            </div>
            {{!-- upload pdf explaination --}}
            <div id='pdf_explaination' class="mt-4">
                <h6>Upload Explaination</h6>
                <input type="file" id='inpFile' />
                <div id='pdf_explaination_path'></div>
            </div>
            {{!-- turn on_off switch --}}
            <div class="custom-control custom-switch mt-4">
                <input type="checkbox" class="custom-control-input" id="on_off_switch" checked>
                <label class="custom-control-label" for="on_off_switch">On / Off</label>
            </div>
            {{!-- show answers on_off switch --}}
            <div class="custom-control custom-switch mt-4">
                {{!-- <p>Show Answers</p> --}}
                <input type="checkbox" class="custom-control-input" id="show_answers_switch" checked>
                <label class="custom-control-label" for="show_answers_switch">Show Answers</label>
            </div>
            {{!-- questions and options --}}
            <div id="questions_and_options">

            </div>
            {{!-- add more question button 'plus btn' --}}
            <button id="add_more_questions_btn" type="button" class="btn btn-dark mt-4" onclick="add_more_questions()">
                <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-plus-circle" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M8 3.5a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5H4a.5.5 0 0 1 0-1h3.5V4a.5.5 0 0 1 .5-.5z"/>
                    <path fill-rule="evenodd" d="M7.5 8a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1H8.5V12a.5.5 0 0 1-1 0V8z"/>
                    <path fill-rule="evenodd" d="M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                </svg>
            </button>
            {{!-- submit button --}}
            <br>
            <button id="final_submit" type="button" class="btn btn-primary mt-4" onclick="final_submit()">Submit</button>

        </div>

        <div id='modal-add-topic' class="mt-4 text-left" hidden>
            {{!-- topic name --}}
            <div id='topic_name' class="mt-4">
                <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroup-sizing-sm">Topic Name</span>
                </div>
                <input id="topic_name_input" type="text" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm" onkeyup="uppercase('topic_name_input')">
                </div>
            </div>
            <button type="button" id='new_topic_submit' class="btn btn-primary mt-2" onclick="new_topic_submit()">Submit</button>
        </div>

        <div id='modal-add-audio' class="mt-4 text-left" hidden>
            {{!-- audio name --}}
            <div id='audio_name' class="mt-4">
                <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroup-sizing-sm">Audio Name</span>
                </div>
                <input id="audio_name_input" type="text" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm" onkeyup="uppercase('audio_name_input')">
                </div>
                <div class="input-group input-group-sm mb-3 mt-4">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroup-sizing-sm">Audio link</span>
                </div>
                <input id="audio_link_input" type="text" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm">
                </div>

            </div>
            <button type="button" id='new_audio_submit' class="btn btn-primary mt-2" onclick="new_audio_submit()">Submit</button>
        </div>

        <div id='modal-add-youtube' class="mt-4 text-left" hidden>
            {{!-- youtube name --}}
            <div id='youtube_name' class="mt-4">
                <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroup-sizing-sm">YouTube Name</span>
                </div>
                <input id="youtube_name_input" type="text" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm" onkeyup="uppercase('youtube_name_input')">
                </div>
                <div class="input-group input-group-sm mb-3 mt-4">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroup-sizing-sm">Youtube Embed link</span>
                </div>
                <input id="youtube_link_input" type="text" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm">
                </div>

            </div>
            <button type="button" id='new_youtube_submit' class="btn btn-primary mt-2" onclick="new_youtube_submit()">Submit</button>
        </div>

        <div id='modal-add-online-class' class="mt-4 text-left" hidden>
            {{!-- online_class name --}}
            <div id='online_class_name' class="mt-4">
                <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroup-sizing-sm">Topic Name</span>
                </div>
                <input id="online_class_name_input" type="text" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm" onkeyup="uppercase('online_class_name_input')">
                </div>
                <div class="input-group input-group-sm mb-3 mt-4">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroup-sizing-sm">Date</span>
                </div>
                <input id="online_class_date_input" type="date" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm">
                </div>
                <div class="input-group input-group-sm mb-3 mt-4">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroup-sizing-sm">Time</span>
                </div>
                <input id="online_class_time_input" type="time" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm">
                </div>

            </div>
            <button type="button" id='new_online_class_submit' class="btn btn-primary mt-2" onclick="new_online_class_submit()">Submit</button>
        </div>


      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        {{!-- <button type="button" class="btn btn-primary">Save changes</button> --}}
      </div>
    </div>
  </div>
</div>

<!-- Button trigger modal -->
<button id='rename_modal_btn'type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter_new" hidden>
  Launch demo modal
</button>

<!-- Modal -->
<div class="modal fade" id="exampleModalCenter_new" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLongTitle">Rename Topic</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body text-center">
        <label for="new_topic_name_input">
          <input id='new_topic_name_input' type="text" placeholder="enter new name" onkeyup="uppercase('new_topic_name_input')">
        </label>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="rename_topic()">Save changes</button>
      </div>
    </div>
  </div>
</div>

<script>
    // set the title
    document.getElementById('title').innerText = "{{title}}"
    
    // set the heading
    // setting this way because of &amp;
    const heading_ = document.getElementById('heading')
    const heading_of_page = "{{{ heading }}}"
    heading_.innerHTML = "{{{ heading }}}"

    // set the active link dynamically
    var nav_selected = document.getElementById('{{ nav_selected }}')
    if ("{{{ heading }}}".split('-')[0] == 'YOUTUBE') {
      nav_selected = document.getElementById('youtube')
      var splitted_heading_ = "{{{ heading }}}".split('-')
      splitted_heading_.shift()
      heading_.innerHTML = splitted_heading_.join('-') || 'TOPICS'
    }
    nav_selected.className += ' active'

    // page variable, either answers or null (which represents quiz)
    const page = "{{ page }}" || null

    // editing rights
    const editing_permission = "{{ editing_permission }}"

    // row_type
    var row_type = {{{json row_type}}}

    // arrow icon
    var arrow_icon = '<svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-arrow-right-square" fill="currentColor" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M14 1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/><path fill-rule="evenodd" d="M7.646 11.354a.5.5 0 0 1 0-.708L10.293 8 7.646 5.354a.5.5 0 1 1 .708-.708l3 3a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0z"/><path fill-rule="evenodd" d="M4.5 8a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1H5a.5.5 0 0 1-.5-.5z"/></svg>'

    // implemented in main globally, that is why its commented out
    {{!-- // logout button
    if (editing_permission == 'true'){
      document.getElementById('logout_button').style.display = ''
    }
    else document.getElementById('logout_button').style.display = 'none'

    function logout(){
      window.location.href = '/logout'
    } --}}

    // uppercase covertion for topic name input
    function uppercase(input_box) {
        var x = document.getElementById(input_box);
        x.value = x.value.toUpperCase();
    }

    // check for '-' in new names or renames
    function hyphen_present(name){
      // if '-' is present then return true
      if (name.includes('-') || name.includes('.')) return true
      else return false
    }

    var list_of_modals = ['modal-add-quiz',
                          'modal-add-topic',
                          'modal-add-audio',
                          'modal-add-youtube',
                          'modal-add-online-class']

    function show_hide_modals(modal){
      for (var i=0; i<list_of_modals.length; i++){
        document.getElementById(list_of_modals[i]).hidden = true
      }
      document.getElementById(modal).hidden = false
    }

    var number_of_times_questions_deleted = 0
    function delete_question(question_num) {
        console.log(question_num)
        number_of_times_questions_deleted++
        document.getElementById(question_num).innerHTML = ''
        // console.log(document.getElementsByClassName(question_num))
    }

    // set_previous_section
    function set_previous_section(q_count){
      var section_id = 'section_' + q_count + '_input_box'
      var section_box = document.getElementById(section_id)
      if (section_box.value.trim() == '') previous_section = null
      else previous_section = section_box.value.trim()
    }

    // to add more question
    const questions_and_options = document.getElementById('questions_and_options')
    var question_count = 0
    var previous_section = null
    function add_more_questions(just_an_empty_holder = false){
      // checking whether user has set a previous_section value
      // checking will only take place upon second question onwards
      if (!just_an_empty_holder){
        // (question_count-number_of_times_questions_deleted) -- this part is for
        // following senario. If the user has added 'n' questions and then deleted
        // them along with deleting the value of section name variable then upon
        // clicking "(+)" button to add new question it will show an alert() saying 
        // "Please add a section name". This check prevents that.
        if (question_count > 0 && (question_count-number_of_times_questions_deleted)!=0){
            if (previous_section == null) {
            alert('Please add a section name')
            return
            }
        }
      }
      // console.log("clicked me")
      question_count++
      // question and options body
      const question = document.createElement('div')
      question.id = 'question_' + question_count
      // question wrapper div
      const question_wrapper = document.createElement('div')
      question_wrapper.className = 'form-group mt-4'
      // label for question
      const question_label = document.createElement('label')
      question_label.setAttribute('for','exampleFormControlTextarea1')
      question_label.innerHTML = 'Question ' + question_count
      // question text area
      const question_textarea = document.createElement('textarea')
      question_textarea.className = 'form-control mt-2'
      question_textarea.id = 'exampleFormControlTextarea1'
      question_textarea.setAttribute('rows','3')
      // appending label and text area
      question_wrapper.appendChild(question_label)
      // appending delete button
      // <button type="button" class="btn btn-danger">Danger</button>
      var delete_btn = document.createElement('button')
      delete_btn.className = 'btn btn-danger ml-2'
      delete_btn.type = 'button'
      delete_btn.innerHTML = 'Delete'
      delete_btn.setAttribute('onclick','delete_question("'+'question_' + question_count+'")')
      question_wrapper.appendChild(delete_btn)
      question_wrapper.appendChild(question_textarea)

      // section option
      var section_name_div = document.createElement('div')
      section_name_div.className = "input-group mb-3"
      var section_name_div_inner_div = document.createElement('div')
      section_name_div_inner_div.className = "input-group-prepend"
      var inner_span = document.createElement('span')
      inner_span.innerHTML = 'Section Name'
      var section_id = 'section_' + question_count
      inner_span.id = section_id
      inner_span.className = 'input-group-text'
      // appending span to inner div
      section_name_div_inner_div.appendChild(inner_span)
      // appending inner div to outer div
      section_name_div.appendChild(section_name_div_inner_div)
      // section input box
      var section_name_input_box = document.createElement('input')
      section_name_input_box.type = 'text'
      section_name_input_box.id = section_id + '_input_box'
      section_name_input_box.className = 'form-control'
      section_name_input_box.setAttribute('aria-describedby',section_id)
      section_name_input_box.setAttribute('onchange','set_previous_section('+question_count+')')
      section_name_input_box.setAttribute('onkeyup','uppercase("'+section_name_input_box.id+'")')

      // checking for previously written section names
      if (previous_section != null){
        section_name_input_box.value = previous_section
      }

      // appending input box to outer div
      section_name_div.appendChild(section_name_input_box)

      // appending question_wrapper to main question div
      question.appendChild(question_wrapper)

      // appending section div to question div
      question.appendChild(section_name_div)

      for (var i=0; i<4; i++){
          // options
          // main option div
          const input_group = document.createElement('div') //input-group
          input_group.className = 'input-group'
          const input_group_prepend = document.createElement('div')
          input_group_prepend.className = 'input-group-prepend'
          const input_group_text = document.createElement('input-group-text')
          input_group_text.className = 'input-group-text'
          const question_radio = document.createElement('input')
          question_radio.type = 'radio'
          question_radio.name = 'radio_' + question_count
          question_radio.setAttribute('aria-label','aria-label="Radio button for following text input"')
          input_group_text.appendChild(question_radio)
          input_group_prepend.appendChild(input_group_text)
          input_group.appendChild(input_group_prepend)
          const text_input_with_radio = document.createElement('input')
          text_input_with_radio.type = 'text'
          text_input_with_radio.className = 'form-control'
          text_input_with_radio.setAttribute('aria-label','Text input with radio button')
          input_group.appendChild(text_input_with_radio)

          // appending options to main questio div
          question.appendChild(input_group)
      }
      // appending everything to the screen
      questions_and_options.appendChild(question)
    }

    // delete_topic
    function delete_topic(topic_num) {
      // ask for confirmation
      if (confirm('Are you sure ?')) {
        if (heading_of_page.trim() == 'TOPICS') var topic_name_to_be_delete = {parent:'null', 'child':topic_num}
        else var topic_name_to_be_delete = {parent: heading_of_page.trim(), 'child':topic_num}
        console.log(topic_name_to_be_delete)

        postData('/gkdeletetopic', topic_name_to_be_delete, 'DELETE')
          .then(data => {
            console.log(data); // JSON data parsed by `data.json()` call
            location.reload();
          });
      }
    }

    // seach box
    // var drop = null
    function filterFunction(){
      // alert('asd')
      var search_key = document.getElementById('search_inp').value.toUpperCase()
      var topic_body = document.getElementById('topic_body')
      // var dropdown_list = topic_body.getElementsByTagName('div')
      // drop=topic_body
      for (var i=0; i<topic_body.childElementCount; i++){
          // console.log(topic_body.children[i].firstElementChild.firstElementChild.innerHTML)
          var text_content = topic_body.children[i].firstElementChild.firstElementChild.innerHTML
          if (text_content.toUpperCase().indexOf(search_key) > -1){
              // console.log(dropdown_list[i].innerHTML)
              topic_body.children[i].style.display = ''
          }
          else topic_body.children[i].style.display = 'none'
      }
    }

    // get available topics
    var topics = {{{json topics }}}

    // console.log(topics)

    function create_new(){
      {{!-- alert('yey') --}}
      document.getElementById('create_new').click()
    }

    // rename_topic
    var old_topic_name = ''
    function show_rename_modal(card_name){
      // if user is not autherized return
      if (editing_permission == 'false') return
      // var card_name = document.getElementById(topic_num)
      old_topic_name = card_name.trim()
      // alert(old_topic_name)
      document.getElementById('rename_modal_btn').click()
    }

    function rename_topic() {
      // popup modal
      var new_topic_name = document.getElementById('new_topic_name_input').value.trim()
      if (new_topic_name == '') {
        alert('enter a name first')
        return
      }
      // checking for hyphens
      if (hyphen_present(new_topic_name)){
        alert('Sorry hyphens("-") or periods(".") are not allowed in names')
        return
      }
      if (topics.includes(new_topic_name)) {
        alert('name already exists')
        return
      }
      {{!-- return --}}
      if (heading_of_page.trim() == 'TOPICS') var parent = 'null'
      else var parent = heading_of_page.trim()
      // var data_to_send = {'parent':}
      postData('/gkrenametopic', {"parent":parent, "old_child":old_topic_name, "new_child":new_topic_name}, 'PUT')
        .then(data => {
          console.log(data); // JSON data parsed by `data.json()` call
          location.reload();
        });
    }

    // new_youtube_submit
    var youtube_name_input = document.getElementById('youtube_name_input')
    var youtube_link_input = document.getElementById('youtube_link_input')
    function new_youtube_submit(){
      if (youtube_name_input.value.trim() == '' || youtube_link_input.value.trim() == ''){
        alert('enter all the details')
        return
      }
      // checking for hyphens
      if (hyphen_present(youtube_name_input.value.trim())){
        alert('Sorry hyphens("-") or periods(".") are not allowed in names')
        return
      }
      if (topics.includes(youtube_name_input.value.trim())){
        alert("Name already exists")
        return
      }
      if (heading_of_page.trim() == 'TOPICS') var parent = 'null'
      else var parent = heading_of_page.trim()

      disable_btn_and_loading_spinner('new_youtube_submit')
      
      postData('/gkaddyoutube', {"parent":parent, "child":youtube_name_input.value.trim(), "link":youtube_link_input.value.trim()}, 'POST')
        .then(data => {
          console.log(data); // JSON data parsed by `data.json()` call
          if (data == 'success') location.reload();
          else alert(data)
        });
    }

    // creating topic cards
    const topic_body = document.getElementById('topic_body')
    function create_cards(topic,type){
      {{!-- topic_body.innerHTML = '' --}}

      var yt = false
      var online_class = false
      if (type == 'audio') type = ' &#x1F3A7;'
      else if (type == 'quiz') type = ' &#x1F4D6;'
      // youtube
      else if (type.split('##').length > 1 && type.includes('youtube')){
        var yt_link = type.split('##')[1]
        yt_link = yt_link.split('/')[yt_link.split('/').length-1]
        type = ''
        yt = true
      }
      else if (type.split('##').length > 1 && type.includes('online_class')) {
        var date = type.split('##')[1]
        var time = type.split('##')[2]
        type = ''
        online_class = true
        // alert(date)
      }

      // card title - h5
      var card_title = document.createElement('h5')
      card_title.id = i
      // link button
      var card_link = document.createElement('button')
      card_link.type = 'button'
      if (topic == 'create_new') {
        card_title.innerHTML = 'Create New'
        card_link.setAttribute('onclick','create_new()')
        card_link.className = 'btn btn-warning'
        card_link.innerText = 'add'
      }
      else {
        card_title.innerHTML = topic + type
        card_title.setAttribute('ondblclick','show_rename_modal("'+topic+'")')
        card_link.className = 'btn btn-dark'
        if (online_class) {
          card_link.innerText = 'register'
          card_link.setAttribute('onclick','register("'+topic+'")')
        }
        else {
          card_link.innerHTML = 'topic link'
          card_link.setAttribute('onclick','topic_selected("'+topic+'")')
        }
      }

      // card-body - div
      var card_body = document.createElement('div')
      card_body.className = 'card-body'
      // appending above items
      card_body.appendChild(card_title)
      // show date if it online class
      if (online_class){
        // date
        var date_ = document.createElement('h5')
        date_.innerHTML = 'Date : ' + date
        card_body.appendChild(date_)
        // time
        var time_ = document.createElement('h5')
        time_.innerHTML = 'Time : ' + time
        card_body.appendChild(time_)
      }
      card_body.appendChild(card_link)

      // outter most div
      var outter_card_div = document.createElement('div')
      outter_card_div.className = 'card ml-4 mt-4'
      outter_card_div.style = 'width: 18rem;'

      // onclick on entire div only when viewed in user mode
      // we don't want to click on online class as there is already
      // a register button
      if (editing_permission == 'false' && online_class == false) {
        card_link.hidden = true
        // card_body.setAttribute('onclick','topic_selected("'+topic+'")')
        outter_card_div.setAttribute('onclick','topic_selected("'+topic+'")')
      }

      if (editing_permission == 'true' && topic != 'create_new'){
        // delete_btn
        var delete_btn = document.createElement('button')
        delete_btn.className = 'btn btn-danger ml-5'
        delete_btn.innerHTML = 'Delete'
        delete_btn.setAttribute('onclick', "delete_topic('"+ topic +"')")
        card_body.appendChild(delete_btn)
      }

      if (yt){
        // card image (youtube thumbnail)
        // <img class="card-img-top" src="..." alt="Card image cap">
        var thumbnail = document.createElement('img')
        thumbnail.class = 'card-img-top'
        // var yt_id = yt_link//'J3U08kSx5KM'
        thumbnail.src = 'https://i.ytimg.com/vi/'+yt_link+'/mqdefault.jpg'
        thumbnail.alt = 'Card image cap'
        // appending image
        outter_card_div.appendChild(thumbnail)
      }

      outter_card_div.appendChild(card_body)

      topic_body.appendChild(outter_card_div)

    }
    
    // if in editing mode
    if (editing_permission == 'true'){
      create_cards('create_new','')
    }

    // topics.sort()
    topics.sort(function(a, b) {
      return a - b;
    });

    for (var i=0; i<topics.length; i++){
      if (row_type[i] == 'forbidden') continue
      create_cards(topics[i],row_type[i])
    }

    function topic_selected(topic_id_) {
      // const topic_id_ = document.getElementById(topic_id)
      console.log(topic_id_)
      // alert('sads')

      // checking whether its "answer" page or "quiz" page
      var query = ""
      if (page && page == "answers") query = "?page=answers"

      if ("{{{ heading }}}" == "TOPICS") {
          window.location = '/gk/' + topic_id_ + query
      }
      else if ("{{ main_parent }}") {
          window.location = '/gk/' + "{{{ heading }}}" + topic_id_ + query
      }
      else window.location = '/gk/' + "{{{ heading }}}" + '-' + topic_id_ + query
    }

    function register(class_name){
      window.location = '/register/' + class_name
    }

    var audio_name_input = document.getElementById('audio_name_input')
    var audio_link_input = document.getElementById('audio_link_input')
    function new_audio_submit(){
      if (audio_name_input.value.trim() == '' || audio_link_input.value.trim() == ''){
        alert('enter a valid input')
        return
      }
      // checking for hyphens
      if (hyphen_present(audio_name_input.value.trim())){
        alert('Sorry hyphens("-") or periods(".") are not allowed in names')
        return
      }
      if (topics.includes(audio_name_input.value.trim())){
        alert('name already exists')
        return
      }

      if (heading_of_page.trim() == 'TOPICS') var parent = 'null'
      else var parent = heading_of_page.trim()
      var data_to_send = {'parent':parent, 'child':audio_name_input.value.trim(), 'link':audio_link_input.value.trim()}

      disable_btn_and_loading_spinner('new_audio_submit')

      postData('/gkaddaudio', data_to_send, 'POST')
        .then(data => {
          console.log(data); // JSON data parsed by `data.json()` call
          if (data == 'success') location.reload()
          else alert(data)
        });

    }

    // disabling the button and loading spinner
    function disable_btn_and_loading_spinner(submit_btn){
      // loading spinner
      document.getElementById('loading').hidden = false
      // disabling final submit
      document.getElementById(submit_btn).disabled = true
    }

    var online_class_name_input = document.getElementById('online_class_name_input')
    var online_class_date_input = document.getElementById('online_class_date_input')
    var online_class_time_input = document.getElementById('online_class_time_input')
    function new_online_class_submit(){
      if (online_class_name_input.value.trim() == ''){
        alert('enter a topic name')
        return
      }
      // date
      if (online_class_date_input.value.trim() == ''){
        alert('enter a date')
        return
      }
      // time
      if (online_class_time_input.value.trim() == ''){
        alert('enter a time')
        return
      }
      // checking for hyphens
      if (hyphen_present(online_class_name_input.value.trim())){
        alert('Sorry hyphens("-") or periods(".") are not allowed in names')
        return
      }
      // check whether name already exists in this section
      if (topics.includes(online_class_name_input.value.trim().toUpperCase())){
        alert('name already exist in this section')
        return
      }

      dic_to_send = {'child':online_class_name_input.value.trim().toUpperCase(),
                      'date':online_class_date_input.value,
                      'time':online_class_time_input.value}

      // if this is the root
      if (heading_of_page.trim().toLowerCase() == 'topics'){
        dic_to_send['parent'] = 'null'
      }
      // if not the root
      else {
        dic_to_send['parent'] = heading_of_page.trim().toUpperCase()
      }

      disable_btn_and_loading_spinner('new_online_class_submit')
      
      postData('/new_online_class', dic_to_send)
        .then(data => {
          console.log(data); // JSON data parsed by `data.json()` call
          if (data == 'success') location.reload();
          else alert(data)
        });

    }

    var topic_name_input = document.getElementById('topic_name_input')
    function new_topic_submit(){
      // alert(topic_name_input.value)
      if (topic_name_input.value.trim() == '') {
        alert('enter a topic name')
        return
      }
      // checking for hyphens
      if (hyphen_present(topic_name_input.value.trim())){
        alert('Sorry hyphens("-") or periods(".") are not allowed in names')
        return
      }
      // check whether name already exists in this section
      if (topics.includes(topic_name_input.value.trim().toUpperCase())){
        alert('name already exist in this section')
        return
      }
      // if everything went well
      var dic_to_send = []
      // this is the root
      if (heading_of_page.trim().toLowerCase() == 'topics'){
        dic_to_send.push({'parent':'null', 'child':topic_name_input.value.trim().toUpperCase()})
        // dic_to_send.push({'parent':topic_name_input.value.trim().toUpperCase(), 'child':'uc'})
      }
      // if not the root
      else {
        dic_to_send.push({'parent':heading_of_page.trim().toUpperCase(), 'child':topic_name_input.value.trim().toUpperCase()})
        // dic_to_send.push({'parent':heading_of_page.trim().toUpperCase()+'-'+topic_name_input.value.trim().toUpperCase(), 'child':'uc'})
      }

      disable_btn_and_loading_spinner('new_topic_submit')

      console.log(dic_to_send)
      postData('/gk_add_new_topic', dic_to_send, 'POST')
        .then(data => {
          console.log(data); // JSON data parsed by `data.json()` call
          if (data == 'success') location.reload()
          else alert(data)
        });
    }

    var editing_mode = false
    function final_submit() {

      // the list of objects which will be sent to the back-end
      var questions_and_options_dic = []

      // console.log("hey")
      // topic name
      var topic_name = document.getElementById('quiz_name_input')
      if (topic_name.value.trim() == '') {
          alert("topic name is missing")
          return
      }
      else console.log(topic_name.value)

      // checking for hyphens
      if (hyphen_present(topic_name.value.trim())){
        alert('Sorry hyphens("-") or periods(".") are not allowed in names')
        return
      }

      // duration check
      var duration_input = document.getElementById('duration_input')
      if (duration_input.value == '') {
          alert('Duration of the quiz is missing')
          return
      }
      // checking whether user has entered some questions
      if (question_count == 0) {
          alert('add some questions first')
          return
      }
      else{
          // count the total number of skipped questions
          // if its equal to the number of questions
          // then don't send data to back-end
          var skipped_question_count = 0
          for (var i=1; i<=question_count; i++){
              // alert("here")
              var question_ = 'question_' + i
              var question = document.getElementById(question_)

              // if any question has been deleted then
              // skip it and increment the skip count
              if (question.innerHTML == '') {
                  // alert("skipped")
                  skipped_question_count++
                  continue
              }

              // question boxes validation
              if (question.children[0].children[2].value.trim() == '') {
                  alert('question '+i+' is missing')
                  return
              }

              // section name validation
              if (question.children[1].children[1].value.trim() == '') {
                  alert('section name for question ' +i+ ' is missing')
                  return
              }

              // options validation
              // var correct_option_check = 0
              var options_list = []
              for (var j=1; j<=4; j++){
                  if (question.children[j+1].children[1].value == ''){
                      alert('option '+j+' for question '+i+' is missing')
                      return
                  }
                  // if option present
                  options_list.push(question.children[j+1].children[1].value.trim())
              }
              // check for the correct choice radio check
              var radio_for_correct_answer = 'radio_' + i
              var radio_selected = document.getElementsByName(radio_for_correct_answer)
              var user_checked_radio = false
              var correct_choice = null
              for (var k=1; k<=4; k++){
                  if (radio_selected[k-1].checked) {
                      user_checked_radio = true
                      correct_choice = question.children[k+1].children[1].value
                      console.log(correct_choice)
                  }
              }
              console.log(user_checked_radio)
              if (!user_checked_radio){
                  alert("choose a correct option for question "+i)
                  // alert("just before function return")
                  return
              }
              // alert("outside the if")
              // if questions, answers and correct option are all validated
              // cross checking whether the new entered name or part number is present in
              // the db or not (can't fully trust the user)
              if (topics.includes(topic_name.value.trim())) {
                  // topic_name_exists = true
                  alert("You choose new topic name, but this quiz alreay exists")
                  return
              }
              
              var dic_to_send = {'topic_name':topic_name.value.trim(),
              //'part_number':part_number_input.value.toString(),
              //'question_paper':question_paper_dropdown.innerHTML,
              'question':question.children[0].children[2].value.trim(),
              'section':question.children[1].children[1].value.trim(),
              'options':options_list,
              'correct':correct_choice.trim(),
              'duration':duration_input.value,
              //'topic_name_exists':topic_name_exists,
              //'part_number_exists':part_number_exists
              }

              questions_and_options_dic.push(dic_to_send)

              // console.log(questions_and_options_dic)
              // return

          }
      }

      // check if atleast one question remains
      // after pressing the delete button
      if (skipped_question_count >= question_count) {
          alert("add some questions first")
          return
      }

      // adding a null value
      // the path will be updated later
      questions_and_options_dic[0]['pdf_path'] = ''

      // the on/off toggle status
      const on_off_switch = document.getElementById('on_off_switch')
      questions_and_options_dic[0]['on_off'] = on_off_switch.checked

      // the show_answers toggle status
      const show_answers_switch = document.getElementById('show_answers_switch')
      questions_and_options_dic[0]['show_answers_switch'] = show_answers_switch.checked

      // appending parent and child names
      if (heading_of_page.trim().toUpperCase() == 'TOPICS') var parent = 'null'
      else var parent = heading_of_page.trim().toUpperCase()
      questions_and_options_dic[0]['parent_child_details'] = {'parent':parent,'child':topic_name.value.trim()}
      // questions_and_options_dic[0]['parent_child_details'].push({'parent':heading_of_page.trim().toUpperCase(),'child':})

      // if everything went well
      // sending data to back-end
      if (editing_mode) {
        var url = '/gk_edit_quiz';
        var method = 'PUT';
      }
      else {
        var url = '/gk_add_quiz';
        var method = 'POST';
      }

      console.log(questions_and_options_dic)
      {{!-- return --}}

      {{!-- // loading spinner
      document.getElementById('loading').hidden = false
      // disabling final submit
      document.getElementById('final_submit').disabled = true --}}

      disable_btn_and_loading_spinner('final_submit')

      postData(url, questions_and_options_dic, method)
      .then(data => {
          console.log(data); // JSON data parsed by `data.json()` call
          // after thats done we if there is a pdf uploaded we send
          // it to the back-end
          // <input type="file" id='inpFile' />
          const inpFile = document.getElementById('inpFile')
          const endpoint = '/gkfileupload'
          const formData = new FormData()
          if (heading_of_page.trim() == 'TOPICS') var filename = topic_name.value.trim()
          else var filename = heading_of_page.trim() + '-' + topic_name.value.trim()
          // if pdf file exists
          if (inpFile.files[0]) {

              formData.append('inpFile',inpFile.files[0],filename)
              
              fetch(endpoint,{
                  method:"POST",
                  body:formData
              }).then((data) => {
                  console.log(data)
                  location.reload();
                  // add_quiz()
              })
          }
          else {
              console.log("pdf file is missing")
              location.reload();
              // add_quiz()
          }

          // if everything went fine refresh the page
          // location.reload();
      });
    }
</script>
