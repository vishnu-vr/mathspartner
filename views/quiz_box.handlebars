<div class="row">
    {{!-- free column --}}
    <div class="col-md-">
          
    </div>
    {{!-- free column --}}
    <div class="col-lg"> 
    <h1 id="heading" class="mt-4 text-center"></h1>
    {{!-- quiz box --}}
    <div class="jumbotron mt-4 text-center">
    {{!-- <h1 class="display-4">Hello, world!</h1> --}}
    {{!-- question --}}
    <p class="text-right" id="timer">timer here</p>
    <p class="lead display-4" id="question">question comes here ?</p>
    <hr class="my-4">
    {{!-- list of answers --}}
    <ul class="list-group" id="answers_list">
        {{!-- <li class="list-group-item">Cras justo odio</li> --}}
    </ul>
    {{!-- list of answers --}}
    <button id="previous" class="btn btn-primary btn-lg mt-4" onclick="previous()" role="button">Previous</button>
    <button id="next" class="btn btn-primary btn-lg mt-4" onclick="next()" role="button">Next</button>
    <br>
    <button data-toggle="modal" data-target="#exampleModal" id="submit" class="btn btn-danger btn-lg mt-4" onclick="submit()" role="button">Submit</button>
    </div>
    {{!-- quiz box --}}
    </div>
    {{!-- free column --}}
    <div class="col-md-">
         
    </div>
    {{!-- free column --}}
</div>

<!-- Button trigger modal -->
{{!-- <button id="modal" type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal">
  Launch demo modal
</button> --}}

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Progress Card</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="location.reload()">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div id="modal-body" class="modal-body">
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="location.reload()">Close</button>
      </div>
    </div>
  </div>
</div>

<script>
    // set the title
    document.getElementById('title').innerText = "{{title}}"
    
    // set the active link dynamically
    var nav_selected = document.getElementById('{{ nav_selected }}')
    nav_selected.className += ' active'

    // get the name of the quiz
    var heading = document.getElementById('heading').innerHTML = "{{heading}}" || "QUIZ"

    // get the questions and answers
    var questions = {{{json questions }}}

    // timer
    var time_interval = null
    const timer = document.getElementById('timer')
    function startTimer(duration, display) {
        var timer = duration, minutes, seconds;
        time_interval = setInterval(function () {
            minutes = parseInt(timer / 60, 10)
            seconds = parseInt(timer % 60, 10);

            minutes = minutes < 10 ? "0" + minutes : minutes;
            seconds = seconds < 10 ? "0" + seconds : seconds;

            display.textContent = minutes + ":" + seconds;

            if (--timer < 0) {
                timer = duration;
                alert("Sorry, times up!!!")
                document.getElementById('submit').click()
            }
        }, 1000);
    }
    // set the value as seconds * minutes * hours
    var timeee = {{ time }}
    startTimer(timeee,timer)

    // next and previous buttons
    const next_button = document.getElementById('next')
    const previous_button = document.getElementById('previous')

    // saving user selected options
    var user_selected_options = []
    // for (var i=0; i<questions.length; i++) user_selected_options[i] = 'empty'

    // saving current question number for next and previous
    // which is 0 initially
    var current_question_num = null
    function insert_question_and_options(question_num) {
        // if the question is first one then
        // disable the previous button and
        // vise-versa
        if (question_num+1 == questions.length) next_button.disabled = true
        else next_button.disabled = false
        if (question_num == 0) previous_button.disabled = true
        else previous_button.disabled = false

        // saving current question number
        current_question_num = question_num

        // the answers list
        const answers_list = document.getElementById('answers_list')
        // cleaing the options
        answers_list.innerHTML = ""

        // the question box
        const question = document.getElementById('question')
        // clearing the question
        question.innerHTML = ""

        question.innerText = questions[question_num].question

        for (var i=0; i<questions[question_num].options.length; i++){
            const option = document.createElement("li")
            option.className = "list-group-item"
            option_id = i
            option.id = option_id
            // option.onclick = "option_selected()"
            option.setAttribute('onclick','option_selected('+option_id+')')
            option.innerText = questions[question_num].options[i]
            answers_list.appendChild(option)  
        }

        // after creating the options
        // highlight the one previously set by the user
        if (user_selected_options[current_question_num] != null){
            const to_be_highlighted = document.getElementById(user_selected_options[current_question_num].option_id)
            to_be_highlighted.className = to_be_highlighted.className + ' active'
        }
    }

    // inserting the first question
    insert_question_and_options(0)
    // console.log(answers_list)

    // onclick for option selection
    // old selected_option
    var old_selected_option = null;
    function option_selected(option_id) {
        // unhighlighting the previously clicked option
        if (old_selected_option != null) {
            old_selected_option.className = 'list-group-item'
            old_selected_option.removeAttribute("style");
        }

        // unhighlighting the previously saved option
        if (user_selected_options[current_question_num] != null){
            const to_be_highlighted = document.getElementById(user_selected_options[current_question_num].option_id)
            to_be_highlighted.className = 'list-group-item'
        }

        const selected_option = document.getElementById(option_id)
        old_selected_option = selected_option
        selected_option.className = selected_option.className + ' active'
        selected_option.style.color = "black"
        
        // saving user selection
        const selected_option_innerText = selected_option.innerText
        user_selected_options[current_question_num] = {selected_option_innerText,option_id}
        console.log("current question : "+current_question_num)
        console.log("selected option : "+selected_option.innerText)
    }

    // next button
    function next() {
        console.log('next pressed')
        // if the last question is reached then alert it
        if (current_question_num+1 == questions.length) {
            alert("this is the last one")
            return
        }
        else{
            current_question_num++
            insert_question_and_options(current_question_num) 
        }
    }
    // previous button
    function previous() { 
        console.log('previous pressed')
        // if the first question is reached then alert it
        if (current_question_num == 0) {
            alert("this is the first one")
            return
        }
        else{
            current_question_num--
            insert_question_and_options(current_question_num) 
        }
    }

    const correct = '<svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-check-circle" fill="green" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/><path fill-rule="evenodd" d="M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.236.236 0 0 1 .02-.022z"/></svg>'
    const wrong = '<svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-x-circle-fill" fill="red" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-4.146-3.146a.5.5 0 0 0-.708-.708L8 7.293 4.854 4.146a.5.5 0 1 0-.708.708L7.293 8l-3.147 3.146a.5.5 0 0 0 .708.708L8 8.707l3.146 3.147a.5.5 0 0 0 .708-.708L8.707 8l3.147-3.146z"/></svg>'

    var score = 0
    function submit() {
        // clearing the time interval
        clearInterval(time_interval);

        // alert("you sure?")
        var number_of_correct_answers = 0
        var number_of_wrong_answers = 0
        var number_of_NA = 0
        for (var i=0; i<questions.length; i++){
            if (user_selected_options[i] != null && 
            questions[i].correct == user_selected_options[i].selected_option_innerText) {
                score++
                number_of_correct_answers++
            }
            else if (user_selected_options[i] != null && 
            questions[i].correct != user_selected_options[i].selected_option_innerText){
                score -= 0.33
                number_of_wrong_answers++
            }
            // un-attempted questions
            if (user_selected_options[i] == null) number_of_NA++
        }
        // alert(score)
        const modal_body = document.getElementById('modal-body')
        modal_body.innerHTML = ""
        var score_p = document.createElement('p')
        score_p.innerText = "SCORE : " + score
        modal_body.appendChild(score_p)
        // after appending score show details
        score_p = document.createElement('p')
        score_p.innerText = "CORRECT ANSWERS : " + number_of_correct_answers
        modal_body.appendChild(score_p)
        score_p = document.createElement('p')
        score_p.innerText = "WRONG ANSWERS : " + number_of_wrong_answers
        modal_body.appendChild(score_p)
        score_p = document.createElement('p')
        score_p.innerText = "NA : " + number_of_NA
        modal_body.appendChild(score_p)
        modal_body.appendChild(document.createElement('hr'))

        // display all the correct answers
        for (var i=0; i<questions.length; i++){
            var q = document.createElement('p')
            q.innerText = questions[i].question
            modal_body.appendChild(q)
            var ca = document.createElement('p')
            
            if (user_selected_options[i] != null && questions[i].correct == user_selected_options[i].selected_option_innerText){
                ca.innerHTML = user_selected_options[i].selected_option_innerText + " " + correct
            }
            else if (user_selected_options[i] != null && questions[i].correct != user_selected_options[i].selected_option_innerText){
                ca.innerHTML = user_selected_options[i].selected_option_innerText + " " + wrong + "&nbsp;&nbsp;&nbsp;" + questions[i].correct + " " + correct
            }
            else ca.innerHTML = " NA &nbsp;&nbsp;&nbsp;" + questions[i].correct + " " + correct
            modal_body.appendChild(ca)
        }

        var pdf_path = "{{ pdf_path }}"
        // if pdf_path available
        if (pdf_path != null && pdf_path != ""){
            // to download complete explaination
            var pdf_viewer = document.createElement('a')
            pdf_viewer.href = pdf_path //'/pdf_uploads/vishnupart_1question_paper_1.pdf' //
            pdf_viewer.download = 'solutions'
            pdf_viewer.innerHTML = 'Download Complete Solution'
            modal_body.appendChild(pdf_viewer)
        }
    }

</script>

<style>
.list-group .list-group-item:hover {
    background-color:antiquewhite;
}
</style>