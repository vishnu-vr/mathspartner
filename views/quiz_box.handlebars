<div class="row">
    {{!-- free column --}}
    <div class="col-md-">
          
    </div>
    {{!-- free column --}}
    <div class="col-lg"> 
    <h3 id="heading" class="mt-4 text-center"></h3>
    {{!-- user details --}}
    <div class="row mt-4" id='user_details'>
        <div class="col-sm">
        </div>
        <div class="col-sm text-center">
            <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="basic-addon1">Name</span>
            </div>
            <input id='name_of_user' type="text" class="form-control" placeholder="Enter Your Name" aria-label="name" aria-describedby="basic-addon1">
            </div>
            <button id='start_quiz_btn' type="button" class="btn btn-primary" onclick="start_quiz()">Start Quiz</button>
        </div>
        <div class="col-sm">
        </div>
    </div>
    {{!-- quiz box --}}
    <div class="jumbotron mt-4 text-center" id='jumbotron' hidden>
        {{!-- <h1 class="display-4">Hello, world!</h1> --}}
        {{!-- question --}}
        {{!-- <h4>Question Number</h4> --}}
        
        {{!-- status button (ie exclamation mark)  --}}
        <div style="overflow:hidden;">
            <button onclick="show_status()" class="btn btn-dark float-right"><svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-exclamation-circle" fill="currentColor" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/><path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z"/></svg></button>
        </div>

        <div style="overflow: hidden;" class="mb-3 mt-3">
            <p style="float: left;">Question Number :&nbsp;&nbsp;</p>
            <p style="float: left;" id="question_number">question number here</p>
            <p style="float: right;" id="timer">timer here</p>
        </div>

        <div id='question_and_answerlist'>

            <div id="are_you_sure_msg" hidden>
                <h3>Are You Sure You Want To Submit ?</h3>
                <button class="btn btn-success mt-4" onclick="submit()">Yes</button>
                <button class="btn btn-secondary mt-4" onclick="check_for_assurance('hide')">No</button>
            </div>

            <p class="lead h3" style="font-size: x-large !important; font-weight:bolder !important;" id="question">question comes here ?</p>
            <hr class="my-4" id='horizontal_line'>
            {{!-- list of answers --}}
            <ul class="list-group" id="answers_list">
                {{!-- <li class="list-group-item">Cras justo odio</li> --}}
            </ul>
            {{!-- list of answers --}}
            <button id="previous" class="btn btn-primary btn-lg mt-4" onclick="previous()" role="button">Previous</button>
            <button id="next" class="btn btn-primary btn-lg mt-4" onclick="next()" role="button">Next</button>
            <br>
            <br>
            <br>
            <br>
            <br>
            <button data-toggle="modal" id="submit" class="btn btn-danger btn-lg mt-4" onclick="check_for_assurance('show')" role="button">Submit</button>
        
        </div>

        <div id='status_of_questions' class="container-fluid" hidden>
            <h3>hey hey</h3>
        </div>
    
    </div>
    {{!-- quiz box --}}

            {{!-- editing quiz --}}
            <div id='edit_quiz' class="mt-4 text-left" hidden>

                {{!-- test link --}}
                <div id='test_link' class="mt-4">
                    <div class="input-group input-group-sm mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="inputGroup-sizing-sm">Test Link</span>
                    </div>
                    <input id="test_link_input" type="text" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm" readonly>
                    </div>
                </div>

                {{!-- topic name (name of the quiz) --}}
                <div id='quiz_name' class="mt-4">
                    <div class="input-group input-group-sm mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="inputGroup-sizing-sm">Quiz Name</span>
                    </div>
                    <input id="quiz_name_input" type="text" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm" onkeyup="uppercase('quiz_name_input')" readonly>
                    </div>
                </div>

                {{!-- duration input box --}}
                <div id='duration' class="mt-4">
                    <div class="input-group input-group-sm mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="inputGroup-sizing-sm">Duration</span>
                    </div>
                    <input id="duration_input" type="number" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm">
                    </div>
                </div>
                {{!-- upload pdf explaination --}}
                <div id='pdf_explaination' class="mt-4">
                    <h6>Upload Explaination</h6>
                    <input type="file" id='inpFile' />
                    <div id='pdf_explaination_path'></div>
                </div>
                {{!-- turn on_off switch --}}
                <div class="custom-control custom-switch mt-4">
                    <input type="checkbox" class="custom-control-input" id="on_off_switch" checked>
                    <label class="custom-control-label" for="on_off_switch">On / Off</label>
                </div>
                {{!-- questions and options --}}
                <div id="questions_and_options">

                </div>
                {{!-- add more question button 'plus btn' --}}
                <button id="add_more_questions_btn" type="button" class="btn btn-dark mt-4" onclick="add_more_questions()">
                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-plus-circle" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M8 3.5a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5H4a.5.5 0 0 1 0-1h3.5V4a.5.5 0 0 1 .5-.5z"/>
                        <path fill-rule="evenodd" d="M7.5 8a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1H8.5V12a.5.5 0 0 1-1 0V8z"/>
                        <path fill-rule="evenodd" d="M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                    </svg>
                </button>
                {{!-- submit button --}}
                <br>
                <button id="final_submit" type="button" class="btn btn-primary mt-4" onclick="final_submit()">Submit</button>
            </div>

    </div>
    
    {{!-- free column --}}
    <div class="col-md-">
         
    </div>
    {{!-- free column --}}

</div>

<button id='loading' type="button" class="btn btn-primary" data-toggle="modal" data-target="#loadingexampleModal" hidden>
  Launch demo modal
</button>

<!-- Modal -->
<div class="modal fade" id="loadingexampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Please Wait...</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
        </div>
      </div>
      <div class="modal-footer">
        {{!-- <button id='close_btn_spinner' type="button" class="btn btn-secondary" data-dismiss="modal" hidden>Close</button> --}}
        {{!-- <button type="button" class="btn btn-primary" hidden>Save changes</button> --}}
      </div>
    </div>
  </div>
</div>

<!-- Button trigger modal -->
<button id="button_to_show_modal" type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal" hidden>
  Launch demo modal
</button>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-keyboard="false" data-backdrop="static">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Progress Card</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="location.reload()">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div id="modal-body" class="modal-body">
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="location.reload()">Close</button>
      </div>
    </div>
  </div>
</div>

<script>
    // set the title
    document.getElementById('title').innerText = "{{title}}"
    
    // set the active link dynamically
    var nav_selected = document.getElementById('{{ nav_selected }}')
    nav_selected.className += ' active'

    // get the name of the quiz
    var heading = document.getElementById('heading').innerHTML = "{{heading}}" || "QUIZ"

    // get the questions and answers
    var questions = {{{json questions }}}

    var grouped_questions = {{{json grouped_questions }}}

    // set the value as seconds * minutes * hours
    var timeee = {{ time }}
    {{!-- startTimer(timeee,timer) --}}

    // pdf path
    var pdf_path = "{{ pdf_path }}"

    // editing rights
    var editing_permission = "{{ editing_permission }}"
    var edit_quiz = document.getElementById('edit_quiz')
    
    // edit quiz
    if (editing_permission == 'true'){
      // document.getElementById('logout_button').style.display = ''
      edit_quiz.hidden = false
    }
    else {
        // document.getElementById('logout_button').style.display = 'none'
        edit_quiz.hidden = true
    }

    function logout(){
      window.location.href = '/logout'
    }

    function copy_test_link(){
        var link = location.href.split('/')
        link[link.length-1] = 'test'
        var test_link_inp = document.getElementById('test_link_input')
        test_link_inp.value = link.join('/')
    }

    copy_test_link()

    // show status
    // this variable acts as a toggle
    var initial_state_of_status = false
    function show_status(){
        document.getElementById('question_and_answerlist').hidden = !initial_state_of_status
        document.getElementById('status_of_questions').hidden = initial_state_of_status
        // only generate status when button clicked
        // to show the status and NOT when the button is
        // clicked to go back to questions
        if (!initial_state_of_status) generate_status()
        initial_state_of_status = !initial_state_of_status
    }

    // to generate a list of numbers which indicate
    // the status of each question
    function generate_status(){
        var status_div = document.getElementById('status_of_questions')
        status_div.innerHTML = ''
        var h5 = document.createElement('h5')
        h5.innerHTML = '<p style="color:green;">Green represents answered questions.</p><p style="color:#343a40;">Grey represents not answered questions.</p>'
        status_div.appendChild(h5)

        for (var i=0; i<questions.length; i++){

            var button = document.createElement('button')
            button.className = 'btn mt-1 ml-1 mr-1 mb-1'

            button.setAttribute('onclick','take_me_to_question('+i+')')

            if (user_selected_options[i] != null){
                button.className += ' btn-success'
            }
            else{
                button.className += ' btn-dark'
            }

            button.style.width = "width: 65px!important;"

            var h4 = document.createElement('h4')

            h4.innerHTML = (i+1)

            button.appendChild(h4)

            status_div.appendChild(button)

        }

        // status_div.innerHTML = user_selected_options
    }

    function take_me_to_question(question_number){
        // alert(question_number)
        current_question_num = question_number
        insert_question_and_options(current_question_num)
        show_status()
    }

    // set_previous_section
    function set_previous_section(q_count){
      var section_id = 'section_' + q_count + '_input_box'
      var section_box = document.getElementById(section_id)
      if (section_box.value.trim() == '') previous_section = null
      else previous_section = section_box.value.trim()
    }

    // to add more question
    const questions_and_options = document.getElementById('questions_and_options')
    var question_count = 0
    var previous_section = null
    function add_more_questions(just_an_empty_holder = false){
      // checking whether user has set a previous_section value
      // checking will only take place upon second question onwards
      if (!just_an_empty_holder){
        if (question_count > 0){
            if (previous_section == null) {
            alert('Please add a section name')
            return
            }
        }
      }
      // console.log("clicked me")
      question_count++
      // question and options body
      const question = document.createElement('div')
      question.id = 'question_' + question_count
      // question wrapper div
      const question_wrapper = document.createElement('div')
      question_wrapper.className = 'form-group mt-4'
      // label for question
      const question_label = document.createElement('label')
      question_label.setAttribute('for','exampleFormControlTextarea1')
      question_label.innerHTML = 'Question ' + question_count
      // question text area
      const question_textarea = document.createElement('textarea')
      question_textarea.className = 'form-control mt-2'
      question_textarea.id = 'exampleFormControlTextarea1'
      question_textarea.setAttribute('rows','3')
      // appending label and text area
      question_wrapper.appendChild(question_label)
      // appending delete button
      // <button type="button" class="btn btn-danger">Danger</button>
      var delete_btn = document.createElement('button')
      delete_btn.className = 'btn btn-danger ml-2'
      delete_btn.type = 'button'
      delete_btn.innerHTML = 'Delete'
      delete_btn.setAttribute('onclick','delete_question("'+'question_' + question_count+'")')
      question_wrapper.appendChild(delete_btn)
      question_wrapper.appendChild(question_textarea)

      // section option
      var section_name_div = document.createElement('div')
      section_name_div.className = "input-group mb-3"
      var section_name_div_inner_div = document.createElement('div')
      section_name_div_inner_div.className = "input-group-prepend"
      var inner_span = document.createElement('span')
      inner_span.innerHTML = 'Section Name'
      var section_id = 'section_' + question_count
      inner_span.id = section_id
      inner_span.className = 'input-group-text'
      // appending span to inner div
      section_name_div_inner_div.appendChild(inner_span)
      // appending inner div to outer div
      section_name_div.appendChild(section_name_div_inner_div)
      // section input box
      var section_name_input_box = document.createElement('input')
      section_name_input_box.type = 'text'
      section_name_input_box.id = section_id + '_input_box'
      section_name_input_box.className = 'form-control'
      section_name_input_box.setAttribute('aria-describedby',section_id)
      section_name_input_box.setAttribute('onchange','set_previous_section('+question_count+')')

      // checking for previously written section names
      if (previous_section != null){
        section_name_input_box.value = previous_section
      }

      // appending input box to outer div
      section_name_div.appendChild(section_name_input_box)

      // appending question_wrapper to main question div
      question.appendChild(question_wrapper)

      // appending section div to question div
      question.appendChild(section_name_div)

      for (var i=0; i<4; i++){
          // options
          // main option div
          const input_group = document.createElement('div') //input-group
          input_group.className = 'input-group'
          const input_group_prepend = document.createElement('div')
          input_group_prepend.className = 'input-group-prepend'
          const input_group_text = document.createElement('input-group-text')
          input_group_text.className = 'input-group-text'
          const question_radio = document.createElement('input')
          question_radio.type = 'radio'
          question_radio.name = 'radio_' + question_count
          question_radio.setAttribute('aria-label','aria-label="Radio button for following text input"')
          input_group_text.appendChild(question_radio)
          input_group_prepend.appendChild(input_group_text)
          input_group.appendChild(input_group_prepend)
          const text_input_with_radio = document.createElement('input')
          text_input_with_radio.type = 'text'
          text_input_with_radio.className = 'form-control'
          text_input_with_radio.setAttribute('aria-label','Text input with radio button')
          input_group.appendChild(text_input_with_radio)

          // appending options to main questio div
          question.appendChild(input_group)
      }
      // appending everything to the screen
      questions_and_options.appendChild(question)
    }

    function delete_question(question_num) {
        console.log(question_num)
        document.getElementById(question_num).innerHTML = ''
        // console.log(document.getElementsByClassName(question_num))
    }

    var quiz_name_input = document.getElementById('quiz_name_input')
    function display_fetched_questions(data) {
        // topic name
        var index = heading.split('-').length
        quiz_name_input.value = heading.split('-')[index-1]//'asd'//

        // enabling add more questions button
        document.getElementById('add_more_questions_btn').hidden = false

        // reset the question count
        question_count = 0

        // display on_off status
        const on_off_switch = document.getElementById('on_off_switch')
        if ("{{ on_off }}"  == 'true') on_off_switch.checked = true
        else on_off_switch.checked = false

        // display the pdf_explaination file
        var pdf_explaination = document.getElementById('pdf_explaination_path')
        // if pdf_path available
        if (pdf_path != null && pdf_path != ""){
            // to download complete explaination
            var pdf_viewer = document.createElement('a')
            pdf_viewer.href = pdf_path //'/pdf_uploads/test.pdf'
            pdf_viewer.download = "solutions"
            pdf_viewer.innerHTML = 'Download Complete Solution'
            pdf_explaination.appendChild(pdf_viewer)
        }

        // enable duration
        var duration = document.getElementById('duration')
        duration.hidden = false
        document.getElementById('duration_input').value = timeee/60//600/60//(data[0].duration)/60
        
        for (var i=0; i<data.length; i++){     

            // insert a holder for the quiz
            add_more_questions(just_an_empty_holder = true)
            // insert content into the holders



            var question_ = 'question_' + (i+1)
            // console.log(question)
            var question = document.getElementById(question_)
            

            // add question
            question.children[0].children[2].value = data[i].question

            // adding section name
            question.children[1].children[1].value = data[i].section //'section name'

            // adding options
            question.children[2].children[1].value = data[i].options[0]
            question.children[3].children[1].value = data[i].options[1]
            question.children[4].children[1].value = data[i].options[2]
            question.children[5].children[1].value = data[i].options[3]

            // check the correct radio
            var radio_for_correct_answer = 'radio_' + (i+1)
            var radio_selected = document.getElementsByName(radio_for_correct_answer)
            // var user_checked_radio = false
            // var correct_choice = null
            for (var k=0; k<4; k++){
                // console.log(question.children[k+1].children[1].value)
                if (question.children[k+2].children[1].value == data[i].correct) {
                    radio_selected[k].checked = true
                }
            }
        }
        // adding the last section name to "previous_section" variable
        previous_section = question.children[1].children[1].value = data[questions.length-1].section
        // console.log(question)
    }


    // displaying questions for editing
    if (editing_permission) display_fetched_questions(questions)

    // start quiz button
    // time when quiz started
    var quiz_start_time = null
    function start_quiz(){
        if (mode == 'test'){
            // check whether the user has provided their name
            const name_of_user = document.getElementById('name_of_user')
            if (name_of_user.value == ''){
                alert('Please provide your name')
                return
            }
        }
        // disable the button
        document.getElementById('start_quiz_btn').disabled = true
        // make the jumbotron visible
        document.getElementById('jumbotron').hidden = false
        // start the timer
        if (editing_permission == 'false' || editing_permission == '') {
            if (resume_session) startTimer(time_left,timer)
            else startTimer(timeee,timer)
        }

        // getting the time when quiz starts
        quiz_start_time = new Date().getTime() / 1000;
    }

    // timer
    var time_interval = null
    var current_time = 0
    const timer = document.getElementById('timer')
    function startTimer(duration, display) {
        var timer = duration, minutes, seconds;
        time_interval = setInterval(function () {
            minutes = parseInt(timer / 60, 10)
            seconds = parseInt(timer % 60, 10);

            minutes = minutes < 10 ? "0" + minutes : minutes;
            seconds = seconds < 10 ? "0" + seconds : seconds;

            display.textContent = minutes + ":" + seconds;
            current_time = timer

            // saving user selection to browser local storage
            // this will be handy incase the user accidentally
            // closes the window
            var local_store_save = JSON.stringify({
                "quiz_name":document.getElementById('heading').innerHTML,
                "user_name":document.getElementById('name_of_user').value,
                "time_remaining":current_time,
                "quiz_start_time":quiz_start_time,
                "user_selected_options":user_selected_options,
                "questions":questions
            })
            localStorage.setItem(heading, local_store_save);

            // console.log(current_time)
            if (--timer < 0) {
                timer = duration;
                alert("Sorry, times up!!!")
                submit()
                // document.getElementById('submit').click()
            }
        }, 1000);
    }

    // next and previous buttons
    const next_button = document.getElementById('next')
    const previous_button = document.getElementById('previous')

    // saving user selected options
    var user_selected_options = []
    // for (var i=0; i<questions.length; i++) user_selected_options[i] = 'empty'

    // saving current question number for next and previous
    // which is 0 initially
    var current_question_num = null
    function insert_question_and_options(question_num) {

        // inserting the current question number
        document.getElementById('question_number').innerHTML = ''
        document.getElementById('question_number').innerHTML = current_question_num+1 +'/'+questions.length

        // if the question is first one then
        // disable the previous button and
        // vise-versa
        if (question_num+1 == questions.length) next_button.disabled = true
        else next_button.disabled = false
        if (question_num == 0) previous_button.disabled = true
        else previous_button.disabled = false

        // saving current question number
        current_question_num = question_num

        // the answers list
        const answers_list = document.getElementById('answers_list')
        // cleaing the options
        answers_list.innerHTML = ""

        // the question box
        const question = document.getElementById('question')
        // clearing the question
        question.innerHTML = ""

        question.innerText = questions[question_num].question

        for (var i=0; i<questions[question_num].options.length; i++){
            const option = document.createElement("li")
            option.className = "list-group-item"
            option_id = i
            option.id = option_id
            // option.onclick = "option_selected()"
            option.setAttribute('onclick','option_selected('+option_id+')')
            option.innerHTML = questions[question_num].options[i]
            answers_list.appendChild(option)  
        }

        // after creating the options
        // highlight the one previously set by the user
        if (user_selected_options[current_question_num] != null){
            const to_be_highlighted = document.getElementById(user_selected_options[current_question_num].option_id)
            to_be_highlighted.className = to_be_highlighted.className + ' active'
        }
    }

    // inserting the first question
    insert_question_and_options(0)
    // console.log(answers_list)

    // onclick for option selection
    // old selected_option
    var old_selected_option = null;
    function option_selected(option_id) {
        // unhighlighting the previously clicked option
        if (old_selected_option != null) {
            old_selected_option.className = 'list-group-item'
            old_selected_option.removeAttribute("style");
        }

        // unhighlighting the previously saved option
        if (user_selected_options[current_question_num] != null){
            const to_be_highlighted = document.getElementById(user_selected_options[current_question_num].option_id)
            to_be_highlighted.className = 'list-group-item'
        }

        const selected_option = document.getElementById(option_id)
        old_selected_option = selected_option
        selected_option.className = selected_option.className + ' active'
        selected_option.style.color = "black"
        
        // saving user selection
        const selected_option_innerHTML = selected_option.innerHTML
        user_selected_options[current_question_num] = {selected_option_innerHTML,option_id}
        // console.log("current question : "+current_question_num)
        // console.log("selected option : "+selected_option.innerHTML)
    }

    // next button
    function next() {
        // console.log('next pressed')
        // if the last question is reached then alert it
        if (current_question_num+1 == questions.length) {
            alert("this is the last one")
            return
        }
        else{
            current_question_num++
            insert_question_and_options(current_question_num) 
        }
    }
    // previous button
    function previous() { 
        // console.log('previous pressed')
        // if the first question is reached then alert it
        if (current_question_num == 0) {
            alert("this is the first one")
            return
        }
        else{
            current_question_num--
            insert_question_and_options(current_question_num) 
        }
    }

    const correct = '<svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-check-circle" fill="green" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/><path fill-rule="evenodd" d="M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.236.236 0 0 1 .02-.022z"/></svg>'
    const wrong = '<svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-x-circle-fill" fill="red" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-4.146-3.146a.5.5 0 0 0-.708-.708L8 7.293 4.854 4.146a.5.5 0 1 0-.708.708L7.293 8l-3.147 3.146a.5.5 0 0 0 .708.708L8 8.707l3.146 3.147a.5.5 0 0 0 .708-.708L8.707 8l3.147-3.146z"/></svg>'

    function check_for_assurance(option){
        if (option == 'show'){
            document.getElementById('are_you_sure_msg').hidden = false
            document.getElementById('question').hidden = true
            document.getElementById('answers_list').hidden = true
            document.getElementById('next').hidden = true
            document.getElementById('previous').hidden = true
            document.getElementById('submit').hidden = true
            document.getElementById('horizontal_line').hidden = true
        }
        else if (option == 'hide'){
            document.getElementById('are_you_sure_msg').hidden = true
            document.getElementById('question').hidden = false
            document.getElementById('answers_list').hidden = false
            document.getElementById('next').hidden = false
            document.getElementById('previous').hidden = false
            document.getElementById('submit').hidden = false
            document.getElementById('horizontal_line').hidden = false
        }
    }

    var score = 0
    var g=null
    function submit() {

        // clear local storage
        localStorage.removeItem(heading);

        document.getElementById('button_to_show_modal').click()

        // alert("reached here")

        // clearing the time interval
        clearInterval(time_interval);

        // alert("you sure?")
        var number_of_correct_answers = 0
        var number_of_wrong_answers = 0
        var number_of_NA = 0

        var section_wise_result = {}
        for (var i=0; i<questions.length; i++){
            // if a new section is found then initialize an
            // empty dictionary to store values
            if (questions[i].section in section_wise_result == false){
                section_wise_result[questions[i].section] = {}

                // result related to individual section
                section_wise_result[questions[i].section].score = 0
                section_wise_result[questions[i].section].number_of_correct_answers = 0
                section_wise_result[questions[i].section].number_of_wrong_answers = 0
                section_wise_result[questions[i].section].number_of_NA = 0
            }

            if (user_selected_options[i] != null && 
            questions[i].correct == user_selected_options[i].selected_option_innerHTML) {
                // global result
                score++
                number_of_correct_answers++
                // section result
                section_wise_result[questions[i].section].score++
                section_wise_result[questions[i].section].number_of_correct_answers++
            }
            else if (user_selected_options[i] != null && 
            questions[i].correct != user_selected_options[i].selected_option_innerHTML){
                // global result
                score -= 0.33
                number_of_wrong_answers++
                // section result
                section_wise_result[questions[i].section].score -= 0.33
                section_wise_result[questions[i].section].number_of_wrong_answers++
            }
            // un-attempted questions
            if (user_selected_options[i] == null) {
                // global result
                number_of_NA++
                // section result
                section_wise_result[questions[i].section].number_of_NA++
            }
        }
        // alert(score)
        const modal_body = document.getElementById('modal-body')
        modal_body.innerHTML = ""
        var score_p = document.createElement('p')
        score_p.innerText = "TOTAL SCORE : " + score.toFixed(2);
        modal_body.appendChild(score_p)
        // after appending score show details
        score_p = document.createElement('p')
        score_p.innerText = "TOTAL CORRECT ANSWERS : " + number_of_correct_answers
        modal_body.appendChild(score_p)
        score_p = document.createElement('p')
        score_p.innerText = "TOTAL WRONG ANSWERS : " + number_of_wrong_answers
        modal_body.appendChild(score_p)
        score_p = document.createElement('p')
        score_p.innerText = "TOTAL NA : " + number_of_NA
        modal_body.appendChild(score_p)
        modal_body.appendChild(document.createElement('hr'))

        // displaying individual section's results
        g=section_wise_result
        if (Object.keys(section_wise_result).length > 1){
            for (i=0; i<Object.keys(section_wise_result).length; i++){
                var section_name = document.createElement('h5')
                section_name.style.fontStyle = 'italic'
                section_name.className = 'mb-3'
                section_name.innerHTML = 'Section : ' + Object.keys(section_wise_result)[i]
                // console.log("Asd")
                modal_body.appendChild(section_name)
                score_p = document.createElement('p')
                score_p.innerText = "SCORE : " + Object.values(section_wise_result)[i].score.toFixed(2);
                modal_body.appendChild(score_p)
                // after appending score show details
                score_p = document.createElement('p')
                score_p.innerText = "CORRECT ANSWERS : " + Object.values(section_wise_result)[i].number_of_correct_answers
                modal_body.appendChild(score_p)
                score_p = document.createElement('p')
                score_p.innerText = "WRONG ANSWERS : " + Object.values(section_wise_result)[i].number_of_wrong_answers
                modal_body.appendChild(score_p)
                score_p = document.createElement('p')
                score_p.innerText = "NA : " + Object.values(section_wise_result)[i].number_of_NA
                modal_body.appendChild(score_p)
                modal_body.appendChild(document.createElement('hr'))
            }
        }


        // display all the correct answers
        var correct_answers = document.createElement('p')
        correct_answers.className = 'mt-2 mb-2 text-center'
        correct_answers.innerHTML = 'ANSWERS'
        modal_body.appendChild(correct_answers)
        for (var i=0; i<questions.length; i++){
            var q = document.createElement('p')
            q.innerText = 'Q'+ (i+1) + ')  ' +questions[i].question
            modal_body.appendChild(q)
            var ca = document.createElement('p')
            
            if (user_selected_options[i] != null && questions[i].correct == user_selected_options[i].selected_option_innerHTML){
                ca.innerHTML = 'Ans'+ ')  ' + user_selected_options[i].selected_option_innerHTML + " " + correct
            }
            else if (user_selected_options[i] != null && questions[i].correct != user_selected_options[i].selected_option_innerHTML){
                ca.innerHTML = 'Ans'+ ')  ' + user_selected_options[i].selected_option_innerHTML + " " + wrong + "&nbsp;&nbsp;&nbsp;" + questions[i].correct + " " + correct
            }
            else ca.innerHTML = 'Ans'+ ')  ' + " NA &nbsp;&nbsp;&nbsp;" + questions[i].correct + " " + correct
            modal_body.appendChild(ca)
        }

        
        // if pdf_path available
        if (pdf_path != null && pdf_path != ""){
            // to download complete explaination
            var pdf_viewer = document.createElement('a')
            pdf_viewer.href = pdf_path //'/pdf_uploads/vishnupart_1question_paper_1.pdf' //
            pdf_viewer.download = 'solutions'
            pdf_viewer.innerHTML = 'Download Complete Solution'
            modal_body.appendChild(pdf_viewer)
        }

        if (mode == 'test'){
            var today = new Date();
            var dd = String(today.getDate()).padStart(2, '0');
            var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
            var yyyy = today.getFullYear();

            today = yyyy + '-' + mm + '-' + dd;
            const quiz_name = document.getElementById('heading').innerHTML
            const name = document.getElementById('name_of_user')

            // var minutes = parseInt(timeee / 60, 10)
            // var seconds = parseInt(timeee % 60, 10)
            // var total_time = parseFloat(minutes+'.'+seconds)
            // alert(total_time)
            var time_taken = timeee - current_time
            var minutes = parseInt(time_taken / 60, 10)
            var seconds = parseInt(time_taken % 60, 10)
            time_taken = parseFloat(minutes+'.'+seconds)
            // alert(time_taken)
            // return
            var data_to_send = {
                'name':name.value,
                'score':score.toFixed(2),
                'correct':number_of_correct_answers,
                'wrong':number_of_wrong_answers,
                'na':number_of_NA,
                'date':today,
                'quiz_name':quiz_name,
                'time_taken':time_taken
            }
            postData('/save_user_results', data_to_send)
            .then(data => {
                console.log("results saved"); // JSON data parsed by `data.json()` call
            });
        }
    }

    // if test mode
    const mode = "{{mode}}"
    if (mode != 'test'){
        document.getElementById('user_details').hidden = true
        start_quiz()
    }
    else {
        // restoring old sessions, ie if any
        // retreiving local storage objects
        var resume_session = false
        var retrievedObject = localStorage.getItem(heading);
        retrievedObject = JSON.parse(retrievedObject)
        if (retrievedObject != null && retrievedObject.quiz_name == heading) {
            const cur_date = new Date().getTime() / 1000;
            var time_left = retrievedObject.time_remaining - (cur_date - retrievedObject.quiz_start_time)
            console.log("time left : "+time_left)
            if (time_left > 5){
                if (confirm("You have some time remaining. Do you want to resume previous session ?")) {
                    resume_session = true
                    // restoring old user name
                    document.getElementById('name_of_user').value = retrievedObject.user_name
                    // restoring old question order
                    questions = retrievedObject.questions
                    // restoring old user selected options
                    user_selected_options = retrievedObject.user_selected_options
                    // inserting the previous first question
                    insert_question_and_options(0)
                    // starting quiz
                    start_quiz()
                }
            }
        }
    }

    // uppercase covertion for topic name input
    function uppercase(input_box) {
        var x = document.getElementById(input_box);
        x.value = x.value.toUpperCase();
    }

    function final_submit() {
      // the list of objects which will be sent to the back-end
      var questions_and_options_dic = []

      // console.log("hey")
      // topic name
      var topic_name = document.getElementById('quiz_name_input')
      if (topic_name.value.trim() == '') {
          alert("topic name is missing")
          return
      }
      else console.log(topic_name.value)

      // duration check
      var duration_input = document.getElementById('duration_input')
      if (duration_input.value == '') {
          alert('Duration of the quiz is missing')
          return
      }
      // checking whether user has entered some questions
      if (question_count == 0) {
          alert('add some questions first')
          return
      }
      else{
          // count the total number of skipped questions
          // if its equal to the number of questions
          // then don't send data to back-end
          var skipped_question_count = 0
          for (var i=1; i<=question_count; i++){
              // alert("here")
              var question_ = 'question_' + i
              var question = document.getElementById(question_)

              // if any question has been deleted then
              // skip it and increment the skip count
              if (question.innerHTML == '') {
                  // alert("skipped")
                  skipped_question_count++
                  continue
              }

              // question boxes validation
              if (question.children[0].children[2].value.trim() == '') {
                  alert('question '+i+' is missing')
                  return
              }

              // section name validation
              if (question.children[1].children[1].value.trim() == '') {
                  alert('section name for question ' +i+ ' is missing')
                  return
              }

              // options validation
              // var correct_option_check = 0
              var options_list = []
              for (var j=1; j<=4; j++){
                  if (question.children[j+1].children[1].value == ''){
                      alert('option '+j+' for question '+i+' is missing')
                      return
                  }
                  // if option present
                  options_list.push(question.children[j+1].children[1].value.trim())
              }
              // check for the correct choice radio check
              var radio_for_correct_answer = 'radio_' + i
              var radio_selected = document.getElementsByName(radio_for_correct_answer)
              var user_checked_radio = false
              var correct_choice = null
              for (var k=1; k<=4; k++){
                  if (radio_selected[k-1].checked) {
                      user_checked_radio = true
                      correct_choice = question.children[k+1].children[1].value
                      console.log(correct_choice)
                  }
              }
              console.log(user_checked_radio)
              if (!user_checked_radio){
                  alert("choose a correct option for question "+i)
                  // alert("just before function return")
                  return
              }
              {{!-- // alert("outside the if")
              // if questions, answers and correct option are all validated
              // cross checking whether the new entered name or part number is present in
              // the db or not (can't fully trust the user)
              if (topics.includes(topic_name.value.trim())) {
                  // topic_name_exists = true
                  alert("You choose new topic name, but this quiz alreay exists")
                  return
              } --}}
              
              var dic_to_send = {'topic_name':topic_name.value.trim(),
              //'part_number':part_number_input.value.toString(),
              //'question_paper':question_paper_dropdown.innerHTML,
              'question':question.children[0].children[2].value.trim(),
              'section':question.children[1].children[1].value.trim(),
              'options':options_list,
              'correct':correct_choice.trim(),
              'duration':duration_input.value,
              //'topic_name_exists':topic_name_exists,
              //'part_number_exists':part_number_exists
              }

              questions_and_options_dic.push(dic_to_send)

              // console.log(questions_and_options_dic)
              // return

          }
      }

      // check if atleast one question remains
      // after pressing the delete button
      if (skipped_question_count >= question_count) {
          alert("add some questions first")
          return
      }

      // adding a null value
      // the path will be updated later
      questions_and_options_dic[0]['pdf_path'] = ''

      // the on/off toggle status
      const on_off_switch = document.getElementById('on_off_switch')
      questions_and_options_dic[0]['on_off'] = on_off_switch.checked

      {{!-- // appending parent and child names
      if (heading.innerHTML.trim().toUpperCase() == 'TOPICS') var parent = 'null'
      else var parent = heading.innerHTML.trim().toUpperCase() --}}
      questions_and_options_dic[0]['whole_quiz_name'] = heading.trim()
      // questions_and_options_dic[0]['parent_child_details'].push({'parent':heading_.innerHTML.trim().toUpperCase(),'child':})

      // if everything went well
      {{!-- // sending data to back-end
      if (editing_mode) var url = '/gk_edit_quiz'
      else var url = '/gk_add_quiz' --}}

      var url = '/gk_edit_quiz'

      console.log(questions_and_options_dic)
      {{!-- return --}}

      postData(url, questions_and_options_dic)
      .then(data => {
          // console.log(data); // JSON data parsed by `data.json()` call
          // after thats done we if there is a pdf uploaded we send
          // it to the back-end
          // <input type="file" id='inpFile' />
          const inpFile = document.getElementById('inpFile')
          const endpoint = '/gkfileupload'
          const formData = new FormData()
          {{!-- var filename = questions_and_options_dic[0].topic_name + '#' + 'part_' + questions_and_options_dic[0].part_number + '#' + questions_and_options_dic[0].question_paper --}}
          // if pdf file exists
          if (inpFile.files[0]) {
              // loading spinner
              document.getElementById('loading').click()

              formData.append('inpFile',inpFile.files[0],heading)
              
              fetch(endpoint,{
                  method:"post",
                  body:formData
              }).then((data) => {
                  // console.log(data)
                  location.reload();
                  // add_quiz()
              })
          }
          else {
              console.log("pdf file is missing")
              location.reload();
              // add_quiz()
          }

          // if everything went fine refresh the page
          // location.reload();
      });
    }


</script>

<style>
.list-group .list-group-item:hover {
    background-color:antiquewhite;
}
</style>